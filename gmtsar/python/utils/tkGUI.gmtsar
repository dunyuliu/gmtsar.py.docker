#! /usr/bin/env python3
import tkinter as tk
from tkinter import ttk
import subprocess, os, signal, sys, threading, time
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg as FigureCanvas
from PIL import Image
matplotlib.use('TkAgg')

# 20250212/dliu@ig.utexas.edu
 
class MyWindow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("GMTSAR v6.5")
        self.geometry("1000x600")
        nGridX = 25
        nGridY = 15
        pixelAlongX = 1000/nGridX #40 pixels
        pixelAlongY = 600/nGridY #30 pixels 
        style = ttk.Style()
        print(style.theme_names())
        style.theme_use('clam')
        pixelMargin = 4
        stickyOption = "nesw"
        ConfigBlockStartRow=5 
        RunCMDBlockStartRow=8
        PlotResultBlockStartRow=10 
        
        if PlotResultBlockStartRow>nGridY-4:
            print('WARNING: Vertical grids not enough.')    

        ultra_light_blue = "#E0F7FF"

        for i in range(nGridX):
            self.grid_columnconfigure(i, minsize=pixelAlongX, weight=1)
        for i in range(nGridY):
            self.grid_rowconfigure(i, minsize=pixelAlongY, weight=1)
        buttonWidth = 5 # characters

        self.rsa_index = 0
        self.snapshot_index = 0
        self.scaling_fig_index = 0

        self.plotting_method = 'png'

        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        self.sample_dict = {'RS2_SLC_Hawaii' : 'RS2', 
                            'ALOS2_Brazil': 'ALOS2', 
                            'ALOS2_SCAN_SSAF': 'ALOS2',
                            'NISAR_SIM_ALOS': 'ALOS',
                            'ENVI_Baja_EQ': 'ENVI',
                            'ENVI_Baja_EQ_SLC': 'ENVI',
                            'ERS_Hector_EQ': 'ERS',
                            'ALOS_Baja_EQ': 'ALOS', 
                            'ALOS_ERSDAC_L1.0': 'ALOS', 
                            'ALOS_SLC_L1.1': 'ALOS', 
                            'ALOS-ionosphere-correction': 'ALOS', 
                            'TSX_SLC_Hawaii': 'TSX',
                            'S1_Ridgecrest': 'S1_TOPS',
                            'S1A_SLC_TOPS_LA': 'S1_TOPS_Frame',
                            'S1A_SLC_TOPS_Greece': 'S1_TOPS_Frame',
                            'S1A_SLC_TOPS_Italy': 'S1_TOPS_Frame'}
                            #'ALL': 'ALOS'}
        self.download_file_list = list(self.sample_dict.keys())

        # Create frame1 for system controls
        self.frame1 = tk.Frame(self, bg=ultra_light_blue, bd=2, relief="sunken")
        self.frame1.grid(row=0, column=0, rowspan=3, columnspan=8, sticky=stickyOption, padx=pixelMargin, pady=pixelMargin)
        self.reconfigureFrameWeight(self.frame1)
        
        gmtsarPathLabel = ttk.Label(self.frame1, text="GMTSAR bin")
        gmtsarPathLabel.grid(row=0, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.gmtsarPathChooser = ttk.Entry(self.frame1)
        self.gmtsarPathChooser.grid(row=0, column=2, rowspan=1, columnspan=6, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.gmtsarPath = 'python'
        try:
            exePaths = os.environ.get('PATH', '').split(os.pathsep)
            exePaths.append(os.path.join(os.getcwd(), 'python/utils/'))
            for path in exePaths:
                fullPath = os.path.join(path, 'p2p_processing')
                if os.path.isfile(fullPath):
                    self.gmtsarPath = path
        except Exception as e:
            self.gmtsarPath = 'No DR4GM exes are found in $PATH; please exit and assign.'
        self.gmtsarPathChooser.insert(0, self.gmtsarPath)
        os.environ['PATH'] = self.gmtsarPath + ':' + os.environ.get('PATH', '')
        sys.path.append(self.gmtsarPath)
        
        self.dataRootPath = tk.StringVar()
        self.dataRootPath.set(os.getcwd())
        
        self.currentPath = tk.StringVar()
        self.currentPath.set(os.getcwd())
        
        # downloader
        runDownloader = ttk.Button(self.frame1, text="Download", command=self.download_data)
        runDownloader.grid(row=3, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.downloader = ttk.Combobox(self.frame1, values=list(self.sample_dict.keys()), state='readonly')
        self.downloader.set('RS2_SLC_Hawaii')
        self.downloader.grid(row=3, column=2, rowspan=1, columnspan=6, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        setDataPathLabel = ttk.Label(self.frame1, text="Data path")
        setDataPathLabel.grid(row=4, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.navigateButton = tk.Menubutton(self.frame1, textvariable=self.dataRootPath, relief=tk.RAISED, width=buttonWidth, anchor="e")
        self.navigateButton.grid(row=4, column=2, rowspan=1, columnspan=6, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.navigateButton.menu = tk.Menu(self.navigateButton, tearoff=0)
        self.navigateButton["menu"] = self.navigateButton.menu
        self.updateDropdownMenu()

        # Create frame2 for setting up parameters
        self.frame2 = tk.Frame(self, bg=ultra_light_blue, bd=2, relief="sunken")
        self.frame2.grid(row=ConfigBlockStartRow-1, column=0, rowspan=1, columnspan=8, sticky=stickyOption, padx=pixelMargin, pady=pixelMargin)
        self.reconfigureFrameWeight(self.frame2)
        frame2_label = ttk.Label(self.frame2, text="Configuration", font=("Arial", 14, "bold"), background=ultra_light_blue)
        frame2_label.grid(padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        runConfigButton = ttk.Button(self, text="Config", command=lambda:self.runCommand('pop_config'))
        runConfigButton.grid(row=ConfigBlockStartRow, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
                  
        SATLabel = ttk.Label(self, text="Choose SAT")
        SATLabel.grid(row=ConfigBlockStartRow, column=2, rowspan=1, columnspan=3, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        
        self.SAT = ttk.Combobox(self, values=list(set([v for v in self.sample_dict.values()])), state='readonly')
        self.SAT.grid(row=ConfigBlockStartRow, column=5, rowspan=1, columnspan=3, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.SAT.set('RS2')

        block_start_row = ConfigBlockStartRow+1
        block_start_col = 0
        checkbox_height = 1
        checkbox_width = 2
        _, self.P1 = self.add_checkbox("Preproc", [block_start_row, block_start_col, checkbox_height, checkbox_width, pixelMargin, stickyOption])
        _, self.P2 = self.add_checkbox("FocAlig", [block_start_row, block_start_col+checkbox_width, checkbox_height, checkbox_width, pixelMargin, stickyOption])
        _, self.P3 = self.add_checkbox("MakTopo", [block_start_row, block_start_col+2*checkbox_width, checkbox_height, checkbox_width, pixelMargin, stickyOption])
        _, self.P4 = self.add_checkbox("Interfe", [block_start_row+1, block_start_col, checkbox_height, checkbox_width, pixelMargin, stickyOption])
        _, self.P5 = self.add_checkbox("Unwrap",  [block_start_row+1, block_start_col+checkbox_width, checkbox_height, checkbox_width, pixelMargin, stickyOption])
        _, self.P6 = self.add_checkbox("Geocode", [block_start_row+1, block_start_col+2*checkbox_width, checkbox_height, checkbox_width, pixelMargin, stickyOption])

        # Run GMTSAR
        self.frame3 = tk.Frame(self, bg=ultra_light_blue, bd=2, relief="sunken")
        self.frame3.grid(row=RunCMDBlockStartRow, column=0, rowspan=1, columnspan=8, sticky=stickyOption, padx=pixelMargin, pady=pixelMargin)
        self.reconfigureFrameWeight(self.frame3)
        frame3_label = ttk.Label(self.frame3, text="Running GMTSAR", font=("Arial", 14, "bold"), background=ultra_light_blue)
        frame3_label.grid(padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        runGMTSARButton = ttk.Button(self, text="p2p_processing", command=lambda:self.runCommand('p2p_processing'))
        runGMTSARButton.grid(row=RunCMDBlockStartRow+1, column=0, rowspan=1, columnspan=4, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        runTestAllButton = ttk.Button(self, text="test_all", command=lambda:self.runCommand('test_all'))
        runTestAllButton.grid(row=RunCMDBlockStartRow+1, column=4, rowspan=1, columnspan=4, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        self.frame4 = tk.Frame(self, bg=ultra_light_blue, bd=2, relief="sunken")
        self.frame4.grid(row=PlotResultBlockStartRow, column=0, rowspan=1, columnspan=8, sticky=stickyOption, padx=pixelMargin, pady=pixelMargin)
        self.reconfigureFrameWeight(self.frame4)
        frame4_label = ttk.Label(self.frame4, text="Showing results", font=("Arial", 14, "bold"), background=ultra_light_blue)
        frame4_label.grid(padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        plotDispMaskllButton = ttk.Button(self, text="corr_ll", command=self.load_corr_ll)
        plotDispMaskllButton.grid(row=PlotResultBlockStartRow+1, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        
        plotDispAmpllButton = ttk.Button(self, text="disp_amp_ll", command=self.load_disp_amp_ll)
        plotDispAmpllButton.grid(row=PlotResultBlockStartRow+1, column=2, rowspan=1, columnspan=3, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)

        plotDispMaskllButton = ttk.Button(self, text="phase_mask_ll", command=self.load_phase_mask_ll)
        plotDispMaskllButton.grid(row=PlotResultBlockStartRow+1, column=5, rowspan=1, columnspan=3, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
                
        plotDispMaskllButton = ttk.Button(self, text="phasefilt_mask_ll", command=self.load_phasefilt_mask_ll)
        plotDispMaskllButton.grid(row=PlotResultBlockStartRow+2, column=0, rowspan=1, columnspan=4, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        
        # Clean block
        cleanButton = ttk.Button(self, text="Clean", command=self.clean)
        cleanButton.grid(row=14, column=0, rowspan=1, columnspan=2, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
                        
        self.figureCanvas = tk.Frame(self)
        self.figureCanvas.grid(row=0, column=8, rowspan=nGridY-4, columnspan=nGridX-8, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.figureCanvas.grid_propagate(False)

        # Canvas blcok for results and operation output
        fig = plt.figure()
        canvas = FigureCanvas(fig, master=self.figureCanvas)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    
        self.stdoutCanvas = tk.Frame(self, bg=ultra_light_blue, bd=2, relief="sunken")
        self.stdoutCanvas.grid(row=nGridY-4, column=8, rowspan=5, columnspan=nGridX-8, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        self.stdoutCanvas.grid_propagate(False)
        stdout_widget = tk.Text(self.stdoutCanvas, wrap=tk.WORD, bg=ultra_light_blue, bd=2, relief="sunken")
        stdout_widget.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)
        sys.stdout = stdoutRedirector(stdout_widget)

        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
    def getDirectoryContents(self, path):
        try:
            contents = os.listdir(path)
            contents.insert(0, '..')
            return contents
        except FileNotFoundError:
            return []

    def updateDataPath(self):
        self.dataRootPath.set(self.currentPath.get())
    
    def updateDropdownMenu(self):
        self.navigateButton.menu.delete(0,'end')
        currentDir = self.currentPath.get()
        for item in self.getDirectoryContents(currentDir):
            self.navigateButton.menu.add_command(
                label=item,
                command = lambda item=item:self.changeDirectory(item)
            )

    def changeDirectory(self, item):
        if item == "..":
            new_path = os.path.dirname(self.currentPath.get())
        else:
            new_path = os.path.join(self.currentPath.get(), item)

        if os.path.isdir(new_path):
            os.chdir(new_path)
            print('Navigating to ',os.getcwd())
            self.currentPath.set(new_path)
            self.dataRootPath.set(new_path)
            self.updateDropdownMenu()
            if item != "..":
                self.dataRootPath.set(new_path)

    def reconfigureFrameWeight(self, frame):
        for i in range(frame.grid_info().get("columnspan")):
            frame.grid_columnconfigure(i, weight=1)
        for i in range(frame.grid_info().get("rowspan")):
            frame.grid_rowconfigure(i, weight=1)

    def on_closing(self):
        self.quit()
        self.destroy()
        sys.exit()
    
    def runCommand(self, cmdType):
        if cmdType=='pop_config':
            # Run pop_config SAT first to generate default config.py, then modify parameters inside. 
            self.run_subprocess(['pop_config', self.SAT.get()])
            # Open config.py and modify parameters based on GUI inputs.
            if self.P1.get() == 'n':
                self.setting_config_params('skip_1', 0, 1)
            if self.P2.get() == 'n':
                self.setting_config_params('skip_2', 0, 1)
            if self.P3.get() == 'n':
                self.setting_config_params('skip_3', 0, 1)
            if self.P4.get() == 'n':
                self.setting_config_params('skip_4', 0, 1)
            if self.P5.get() == 'n':
                self.setting_config_params('skip_5', 0, 1)
            if self.P6.get() == 'n':
                self.setting_config_params('skip_6', 0, 1)

        elif cmdType=='p2p_processing':
            filename_image_pair = self.find_image_pair()
            self.run_subprocess(['p2p_processing', self.SAT.get(), filename_image_pair[0], filename_image_pair[1], 'config.py'])
        elif cmdType=='test_all':
            for case in self.download_file_list:
                os.chdir(case)
                self.run_subprocess(['cleanup', 'all'])
                self.run_subprocess(['cp', '-r', '../python/utils/README_'+case+'.txt', '.'])
                self.run_subprocess(['./README_'+case+'.txt', '>', 'log.txt'])
                os.chdir('..')
        
    def run_subprocess(self, command):
            # background running.
            threading.Thread(
                target=lambda: self._run_and_print(command),
                daemon=True
            ).start()

    def _run_and_print(self, command):
        try:
            print('Running command : ', command)
            # Redirect stdout and stderr to the text widget
            start_time = time.time()
            process = subprocess.Popen(
                command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True
            )
            for line in process.stdout:
                print(line, end="")
            process.wait()
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"Command completed in {elapsed_time:.2f} seconds for command {command}")
        except Exception as e:
            print(f"Subprocess error: {e}")
        return elapsed_time
    
    def setting_config_params(self, var, old_params, new_params):
        with open('config.py', 'r') as file:
            lines = file.readlines()

        for  i, line in enumerate(lines):
            if line.startswith(var):
                lines[i] = var + ' = ' + str(new_params) + '\n'
        
        with open('config.py', 'w') as file:
            file.writelines(lines)

        print('Old param of '+var+' is changed to '+str(new_params))
        
    def display_image(self, image_path):

        if self.plotting_method == 'png':
            img = Image.open(image_path)
            fig, ax = plt.subplots(dpi=600)
            ax.imshow(img)
            ax.axis('off')
            # Add the new plot to the figureCanvas
            canvas = FigureCanvas(fig, master=self.figureCanvas)
            canvas.draw()   
            # Use grid instead of pack to make it responsive
            canvas.get_tk_widget().grid(row=0, column=0, sticky="nsew")
            
            # Ensure that the canvas expands to fill available space
            self.figureCanvas.grid_rowconfigure(0, weight=1)
            self.figureCanvas.grid_columnconfigure(0, weight=1)
            
            # Make sure the widget also expands within its parent
            self.grid_rowconfigure(self.figureCanvas.grid_info()["row"], weight=1)
            self.grid_columnconfigure(self.figureCanvas.grid_info()["column"], weight=1)

        else:
            for widget in self.figureCanvas.winfo_children():
                widget.destroy()  

            fig = pickle.load(open(image_path, 'rb'))

            def resize_figure(event=None):
                # Get the canvas size after window is rendered
                canvas_width = self.figureCanvas.winfo_width()
                canvas_height = self.figureCanvas.winfo_height()

                # Resize the figure to match the canvas size
                fig.set_size_inches(canvas_width / fig.dpi, canvas_height / fig.dpi)
                fig.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05)
                
                # Redraw the canvas
                canvas.draw()

            canvas = FigureCanvas(fig, master=self.figureCanvas)
            canvas.draw()
            canvas.get_tk_widget().grid(row=0, column=0, sticky="nsew")

            self.figureCanvas.grid_rowconfigure(0, weight=1)
            self.figureCanvas.grid_columnconfigure(0, weight=1)
            
            self.figureCanvas.bind("<Configure>", resize_figure)
            self.figureCanvas.grid_propagate(False)
            self.figureCanvas.update()

    def locate_result_filepath(self, filename):
        for root, dirs, files in os.walk('intf'):
            print(root, dirs, files)
            for file in files:
                if file == filename+'.png':
                    filepath = os.path.join(root, filename)
        return filepath

    def load_corr_ll(self):
        filename = 'corr_ll'
        filepath = self.locate_result_filepath(filename)
        self.display_image(filepath+'.'+self.plotting_method)

    def load_disp_amp_ll(self):
        filename = 'display_amp_ll'
        filepath = self.locate_result_filepath(filename)
        self.display_image(filepath+'.'+self.plotting_method)

    def load_phase_mask_ll(self):
        filename = 'phase_mask_ll'
        filepath = self.locate_result_filepath(filename)
        self.display_image(filepath+'.'+self.plotting_method)

    def load_phasefilt_mask_ll(self):
        filename = 'phasefilt_mask_ll'
        filepath = self.locate_result_filepath(filename)
        self.display_image(filepath+'.'+self.plotting_method)

    def load_rsa(self):
        figure_files = [f for f in os.listdir() if f.endswith('.'+self.plotting_method) and 'ContourRSA_T' in f]
        self.total_rsa_files = len(figure_files)

        id = self.update_rsa_id()
        if figure_files:
            self.display_image(figure_files[id])

    def load_scaling(self):
        figure_files = [f for f in os.listdir() if f.endswith('.'+self.plotting_method) and 'gmRSA_T' in f]
        self.total_rsa_scaling_files = len(figure_files)

        id = self.update_rsa_scaling_id()
        if figure_files:
            self.display_image(figure_files[id])

    def load_snapshot(self):
        figure_files = [f for f in os.listdir() if f.endswith('.'+self.plotting_method) and 'gMap' in f]
        latest_file = max(figure_files, key=os.path.getmtime)
        self.display_image(latest_file)

    def update_rsa_id(self):
        self.rsa_index += 1
        if self.rsa_index >= self.total_rsa_files:
            self.rsa_index = 0
        return self.rsa_index
    
    def update_rsa_scaling_id(self):
        self.scaling_fig_index += 1
        if self.scaling_fig_index >= self.total_rsa_scaling_files:
            self.scaling_fig_index = 0
        return self.scaling_fig_index
      
    def update_snapshot_id(self):
        self.snapshot_index += 1
        if self.snapshot_index >= self.total_snapshot_files:
            self.snapshot_index = 0
        return self.snapshot_index
    
    def add_checkbox(self, checkbutton_label, pos=[0, 0, 1, 1, 5, 5, 'nesw']):
        process_or_not = tk.StringVar(value='y')
        #font = tk.font.Font(size=10)
        checkbutton = tk.Checkbutton(self, text=checkbutton_label, variable=process_or_not, onvalue='y', offvalue='n')
        start_row = pos[0]
        start_col = pos[1]
        row_span = pos[2]
        col_span = pos[3]
        pixelMargin = pos[4]
        stickyOption = pos[5]
        checkbutton.grid(row=start_row, column=start_col, rowspan=row_span, columnspan=col_span, padx=pixelMargin, pady=pixelMargin, sticky=stickyOption)
        return checkbutton, process_or_not
    
    def download_data(self):
        sat = self.downloader.get()
        filename = sat+'.tar.gz'
        self.download_if_missing(filename)
        self.extract_if_missing(filename[:-7])

    def download_if_missing(self, filename):
        if not os.path.exists(filename):
            print(f"Downloading {filename}...")
            cmd = f"wget http://topex.ucsd.edu/gmtsar/tar/{filename}"
            self.run_subprocess(cmd.split())
            print(f"{filename} downloaded.")
        else:
            print(f"{filename} already exists. Skipping download.")
    
    def extract_if_missing(self, foldername):
        if not os.path.exists(foldername):
            print(f"Extracting {foldername}...")
            #subprocess.run(f"mkdir {foldername}", shell=True)
            self.run_subprocess(['mkdir', foldername])
            cmd = f"tar -xzf {foldername}.tar.gz -C {foldername}"
            #subprocess.run(cmd, shell=True)
            self.run_subprocess(cmd.split())
            print(f"{foldername} extracted.")
        else:
            print(f"{foldername} already exists. Skipping extraction.")

    def find_image_pair(self):
        print(self.dataRootPath.get())
        dir = self.dataRootPath.get() + '/raw/'
        raw_iamge_files = [f for f in os.listdir(dir)] # remove after only the last dot
        print(raw_iamge_files)
        filename_image_pair = []
        if self.SAT.get() == 'RS2':
            filename_image_pair = [os.path.splitext(f)[0] for f in raw_iamge_files if f.endswith('.PRM')]
        elif self.SAT.get() == 'ALOS':
            filename_image_pair = []
            for file in raw_iamge_files:
                if os.path.splitext(file)[1] == ".0__A" and file.startswith('IMG-'):
                    filename_image_pair.append(file)

        if len(filename_image_pair) != 2:
            raise ValueError("There should be exactly two raw image files in the directory but get "+str(len(filename_image_pair)))
        
        print(filename_image_pair)
        return filename_image_pair

    def clean(self):
        self.run_subprocess(['rm', '-rf', 'intf', 'SLC'])
        print('Cleaned result directories intf/, SLC/ ...')

class stdoutRedirector:
    def __init__(self, widget):
        self.widget = widget

    def write(self, string):
        self.widget.configure(state='normal')
        self.widget.insert(tk.END, string)
        self.widget.configure(state='disabled')
        self.widget.yview(tk.END)

    def flush(self):
        pass
    def close(self):
        self.widget.configure(state='normal')
        self.widget.delete(1.0, tk.END)
        self.widget.configure(state='disabled')


def signal_handler(sig, frame):
    print('Exiting. You pressed Ctrl+C!')
    sys.exit(0)
    
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    try:
        app = MyWindow()
        app.mainloop()
    except KeyboardInterrupt:
        print("Application closed by user")
        sys.exit(0)
